1)Dot Product of Matrix

import numpy as np

def create_matrix(mc):
    print("Array" + str(mc) + " Element")
    array_1 = map(int, input().split())
    array_1 = np.array(list(array_1))
    
    print("\nArray" + str(mc) + " Row and Column:")
    row, column = map(int, input().split())
    
    if len(array_1) != (row * column):
        print("Row_column size do not match")
        return create_matrix(mc)
    
    array_1 = array_1.reshape(row, column)
    
    print("\nArray" + str(mc))
    print(array_1)
    
    return array_1

arr1 = create_matrix(1)
arr2 = create_matrix(2)

if arr1.shape == arr2.shape:
    print("Dot product")
    print(np.dot(arr1, arr2))
else:
    print("Dimensions do not match")


2) Transpose of Matrix

import numpy as np

def create_matrix(mc):
    print("\nARRAY " + str(mc) + " Elements : ")
    array_1 = map(int, input().split())
    array_1 = np.array(list(array_1))
    
    print("\nARRAY " + str(mc) + " , ROW COLUMN : ")
    row, column = map(int, input().split())
    
    if len(array_1) != (row * column):
        print("\nRow and Column size do not match with total elements!! Retry")
        return create_matrix(mc)
    
    array_1 = array_1.reshape(row, column)
    
    print("\nARRAY " + str(mc))
    print(array_1)
    
    print("\nTranspose : ")
    return array_1

print(create_matrix(1).transpose())


3)Determinant of Matrix

import numpy as np

def create_matrix(mc):
    print("\nARRAY " + str(mc) + " Elements : ")
    array_1 = map(int, input().split())
    array_1 = np.array(list(array_1))
    
    print("\nARRAY " + str(mc) + " , ROW COLUMN : ")
    row, column = map(int, input().split())
    
    if len(array_1) != (row * column):
        print("\nRow and Column size do not match with total elements!! Retry")
        return create_matrix(mc)
    
    array_1 = array_1.reshape(row, column)
    
    print("\nARRAY " + str(mc))
    print(array_1)
    
    print("\nDeterminant : ")
    return array_1

matrix = create_matrix(1)
det = np.linalg.det(matrix)
print(det)

4) Trace of Matrix

import numpy as np

def create_matrix(mc):
    print("\nARRAY " + str(mc) + " Elements : ")
    array_1 = np.array(list(map(int, input().split())))
    
    print("\nARRAY " + str(mc) + " , ROW COLUMN : ")
    row, column = map(int, input().split())
    
    if len(array_1) != (row * column):
        print("\nRow and Column size do not match with total elements!! Retry")
        return create_matrix(mc)
    
    array_1 = array_1.reshape(row, column)
    
    print("\nARRAY " + str(mc))
    print(array_1)
    
    print("\nTrace : ")
    return array_1

matrix = create_matrix(1)
trace_value = matrix.trace()
print(trace_value)

5) Inverse of Matrix

import numpy as np

def create_matrix(mc):
    print("\nARRAY " + str(mc) + " Elements : ")
    array_1 = np.array(list(map(int, input().split())))
    
    print("\nARRAY " + str(mc) + " , ROW COLUMN : ")
    row, column = map(int, input().split())
    
    if len(array_1) != (row * column):
        print("\nRow and Column size do not match with total elements!! Retry")
        return create_matrix(mc)
    
    array_1 = array_1.reshape(row, column)
    
    print("\nARRAY " + str(mc))
    print(array_1)
    
    print("\nInverse : ")
    return array_1

matrix = create_matrix(1)
inverse_matrix = np.linalg.inv(matrix)
print(inverse_matrix)

6. Rank of Matrix

import numpy as np

def create_matrix(mc):
    print("\nARRAY " + str(mc) + " Elements : ")
    array_1 = np.array(list(map(int, input().split())))
    
    print("\nARRAY " + str(mc) + " , ROW COLUMN : ")
    row, column = map(int, input().split())
    
    if len(array_1) != (row * column):
        print("\nRow and Column size do not match with total elements!! Retry")
        return create_matrix(mc)
    
    array_1 = array_1.reshape(row, column)
    
    print("\nARRAY " + str(mc))
    print(array_1)
    
    print("\nRank : ")
    return array_1

matrix = create_matrix(1)
rank_value = np.linalg.matrix_rank(matrix)
print(rank_value)


7. Eigen Values and Eigen Vectors

import numpy as np

def create_matrix(mc):
    print("\nARRAY " + str(mc) + " Elements : ")
    array_1 = np.array(list(map(int, input().split())))
    
    print("\nARRAY " + str(mc) + " , ROW COLUMN : ")
    row, column = map(int, input().split())
    
    if len(array_1) != (row * column):
        print("\nRow and Column size do not match with total elements!! Retry")
        return create_matrix(mc)
    
    array_1 = array_1.reshape(row, column)
    
    print("\nARRAY " + str(mc))
    print(array_1)
    
    return array_1

matrix = create_matrix(1)
eigenvalues, eigenvectors = np.linalg.eig(matrix)

print("\nE-values : ")
print(eigenvalues)
print("\nE-vectors : ")
print(eigenvectors)


