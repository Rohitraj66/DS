from keras.datasets import mnist
from keras.models import Sequential
from keras.layers import Dense, Dropout, Conv2D, MaxPooling2D, Flatten
from tensorflow.keras import utils

# To calculate accuracy
from sklearn.metrics import accuracy_score

# Loading the dataset
(X_train, y_train), (X_test, y_test) = mnist.load_data()

# Building the input vector from the 28x28 pixels
X_train = X_train.reshape(X_train.shape[0], 28, 28, 1)
X_test = X_test.reshape(X_test.shape[0], 28, 28, 1)
X_train = X_train.astype('float32')
X_test = X_test.astype('float32')

# Normalizing the data to help with the training
X_train /= 255
X_test /= 255

# One-hot encoding using Keras' numpy-related utilities
n_classes = 10
print("Shape before one-hot encoding: ", y_train.shape)
Y_train = utils.to_categorical(y_train, n_classes)
Y_test = utils.to_categorical(y_test, n_classes)
print("Shape after one-hot encoding: ", Y_train.shape)

# Building a linear stack of layers with the sequential model
model = Sequential()

# Convolutional layer
model.add(Conv2D(25, kernel_size=(3, 3), strides=(1, 1), padding='valid', activation='relu', input_shape=(28, 28, 1)))
model.add(MaxPooling2D(pool_size=(2, 2)))  # Pooling layer with pool size (2, 2)

# Flatten output of conv
model.add(Flatten())

# Hidden layer
model.add(Dense(100, activation='relu'))

# Output layer
model.add(Dense(10, activation='softmax'))

# Compiling the sequential model
model.compile(loss='categorical_crossentropy', metrics=['accuracy'], optimizer='adam')

# Training the model for 10 epochs
model.fit(X_train, Y_train, batch_size=128, epochs=10, validation_data=(X_test, Y_test))
